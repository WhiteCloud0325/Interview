题目描述
定义栈的数据结构，请在该类型中实现一个能够得到栈最小元素的min函数。

Answer1:使用两个栈,一个栈用来存储数据,一个栈用来存当前最小值

class Solution {
public:
    void push(int value) {
        if(st1.empty()){
            st1.push(value);
            st2.push(value);
        }
        else{
            if(st2.top()>=value)
                st2.push(value);
            st1.push(value);
        }
    }
    void pop() {
        if(st2.top() == st1.top())
            st2.pop();
        st1.pop();
    }
    int top() {
        return st1.top();
    }
    int min() {
        return st2.top();
    }
    stack<int> st1;    //数据入栈
    stack<int> st2;    //最小值入栈
};


Answer2:只是用一个栈实现，min_num是当前栈最小值，st push 当value < min_num, push(min_num-value)是个正数，表示这是最小值的位置且min_num=value，且下一个最小值是是min_num+st.top()
														 当value >min_num,push(min_num-value)是负数,表示这是大于最小值的数,value=min_num-st.top()
		st使用long预防加减法超出范围
class Solution {
public:
    void push(int value) {
        if(st.empty()){
            min_num=value;
            st.push(0);
        }
        else{
            st.push(min_num-value);
            min_num=(min_num>value)?value:min_num;
        }
    }
    void pop() {
        if(st.top()>0 )
           min_num+=st.top();
        st.pop();
    }
    int top() {
        if(st.top()<=0) return min_num-st.top();
        else return min_num;
    }
    int min() {
        return min_num;
    }
    stack<long> st;
    int min_num=INT_MAX;
};