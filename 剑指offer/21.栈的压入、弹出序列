题目描述
输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。
例如序列1,2,3,4,5是某栈的压入顺序，序列4，5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）

Answer1:使用回溯方法求出所有序列再比较
class Solution {
public:
    bool IsPopOrder(vector<int> pushV,vector<int> popV) {
        stack<int> st;
        vector<int> vec;
        backTracking(pushV,0,st,vec);
        for(int i=0;i<set_.size();i++){
            if(popV == set_[i]) return true;
        }
        return false;
    }
    void backTracking(vector<int> &pushV, int i, stack<int> st,vector<int> vec){
        if (i == pushV.size()) return;
        st.push(pushV[i]);
        backTracking(pushV, i + 1, st, vec);
        while (!st.empty()){
            vec.push_back(st.top());
            st.pop();
            if (vec.size() == pushV.size())
                set_.push_back(vec);
            else
                backTracking(pushV, i + 1, st, vec);
	}
}
    vector<vector<int>> set_;
};