题目描述
输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，
例如，如果输入如下矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.


Answer:
分析：矩阵行数m，列数n，m和n不一定相等，取m和n的最小值矩阵行数m， end=min(m,n),k表示顺时针的次数，k<end/2。
	考虑到end为奇数时，m<n是中间一行元素没有打印，即m/2行没有打印
					   n<=m是中间一列元素没有打印,即n/2列没有打印
	

vector<int> printMatrix(vector<vector<int> > matrix) {
	vector<int> res;
	int m=matrix.size(),n=matrix[0].size();
	int end=min(n,m);
	int i=0,j=0,k=0;
	while(k< end/2){
		for(j=k;j<=n-1-k;j++)           //矩阵上面第k行 (k从零开始)
			res.push_back(matrix[k][j]);
		for(i=1+k;i<=m-1-k;i++)			//矩阵右边第k列，即矩阵第n-1-k列
			res.push_back(matrix[i][n-1-k]);
		for(j=n-2-k;j>=k;j--)			//矩阵下面第k行，即矩阵第m-1-k行
			res.push_back(matrix[m-1-k][j]);
		for(i=m-2-k;i>=k+1;i--)			//矩阵左边第k列,即矩阵第k列
			res.push_back(matrix[i][k]);
		k++;
	}
	if(end%2!=0){
		if(m<n){
			for(j=k;j<=n-1-k;j++)     //打印中间m/2行
				res.push_back(matrix[k][j]);
		}
		else{
			for(i=k;i<=m-1-k;i++) 		//打印中间n/2列
				res.push_back(matrix[i][k]);
		}
	}
	return res;
}