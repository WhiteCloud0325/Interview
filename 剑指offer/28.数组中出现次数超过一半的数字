题目描述
数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。
例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。


Answer:
分析：使用hash_map来记录，如果存在大于一半长度的数字，则只有唯一一个，所以遍历的时候就与长度一半比较，大于则返回数字，循环结束则说明不存在
class Solution {
public:
    int MoreThanHalfNum_Solution(vector<int> numbers) {
        unordered_map<int,int> hash_map;
        int len=numbers.size();
        len=len/2;
        for(auto i:numbers){
            hash_map[i]++;
            if(hash_map[i]>len) 
                return i;
        }
        return 0;

    }
};
Answer2:时间O(n),空间O(1)
		遍历数组时保存两个值，一个是数字result，一个是次数times；如果一个数字和我们保存的数字相同，则次数+1，不同则次数-1；如果次数为0，则保存此数字。由于要找的数字
		比其他数字多，则最后一次把数字设为1的数字是我们要检验的数字。
class Solution {
public:
    int MoreThanHalfNum_Solution(vector<int> numbers) {
        int len = numbers.size();
        if(len == 0 ) return 0;
        int times=1,result=numbers[0];
        for(int i=1;i<len;i++){
            if(times==0){
                result=numbers[i];
                times=1;
            }
            else if(numbers[i]==result)
                times++;
            else
                times--;
        }
        if(CheckMoreThanHalf(numbers,result)) return result;
        else return 0;

    }
    bool CheckMoreThanHalf(vector<int> &numbers,int result){
        int times=0;
        for(auto i:numbers){
            if(i == result)
                times++;
        }
        if(times>numbers.size()/2) return true;
        else return false;
    }
};

