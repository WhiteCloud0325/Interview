描述
在类的构造函数中给一个整数数组, 实现两个方法 query(start, end) 和 modify(index, value):

对于 query(start, end), 返回数组中下标 start 到 end 的 和。
对于 modify(index, value), 修改数组中下标为 index 上的数为 value.

样例
给定数组 A = [1,2,7,8,5].

query(0, 2), 返回 10.
modify(0, 4), 将 A[0] 修改为 4.
query(0, 1), 返回 6.
modify(2, 1), 将 A[2] 修改为 1.
query(2, 4), 返回 14.
挑战
O(logN) time for query and modify.


Answer:
class Solution {
public:
    /* you may need to use some attributes here */

    /*
    * @param A: An integer array
    */
    class SegmentTreeNode{
    public:
        SegmentTreeNode(int start, int end, int sum):start(start), end(end), sum(sum), left(NULL), right(NULL){}
    public:
        int start;
        int end;
        int sum;
        SegmentTreeNode * left;
        SegmentTreeNode * right;
    };
    SegmentTreeNode * build(vector<int> &A, int start, int end) {
        if (end < start) {
           return NULL; 
        }
        else if (start == end) {
            return new SegmentTreeNode(start, end, A[start]);
        }
        else {
            int mid = (start + end) / 2;
            SegmentTreeNode* root = new SegmentTreeNode(start, end, 0);
            root->left = build(A, start, mid);
            root->right = build(A, mid + 1, end);
            root->sum = root->left->sum + root->right->sum;
            return root;
        }
    }
    
    long long query(SegmentTreeNode* root, int start, int end) {
        if (root->start == start && root->end == end) {
            return root->sum;
        }
        int mid = (root->start + root->end) / 2;
        if (mid < start) {
            return query(root->right, start, end);
        }
        else if(mid >= end) {
            return query(root->left, start, end);
        }
        else{
            return query(root->left, start, mid) + query(root->right, mid + 1, end);
        }
    }
    
    void modify(SegmentTreeNode * root, int index, int value) {
        if (root == NULL || root->start > index || root->end < index) {
            return;
        }
        stack<SegmentTreeNode*> st;
        SegmentTreeNode * cur = root;
        while(cur->start != index || cur->end != index) {
            st.push(cur);
            int mid = (cur->start + cur->end) / 2;
            if (index <= mid) {
               cur = cur->left; 
            }
            else {
                cur = cur->right;
            }
        }
        cur->sum = value;
        while (!st.empty()) {
            cur = st.top();
            st.pop();
            cur->sum = cur->left->sum + cur->right->sum;
        }
    }
    
    Solution(vector<int> A) {
        // do intialization if necessary
        root = build(A, 0 , A.size() - 1);
    }

    /*
     * @param start: An integer
     * @param end: An integer
     * @return: The sum from start to end
     */
    long long query(int start, int end) {
        // write your code here
        return query(root, start, end);
    }

    /*
     * @param index: An integer
     * @param value: An integer
     * @return: nothing
     */
    void modify(int index, int value) {
        // write your code here
        modify(root, index, value);
    }
public:
    SegmentTreeNode * root;
};
