描述
给出不同面额的硬币以及一个总金额. 写一个方法来计算给出的总金额可以换取的最少的硬币数量. 如果已有硬币的任意组合均无法与总金额面额相等, 那么返回 -1.
你可以假设每种硬币均有无数个

样例
给出 coins = [1, 2, 5], amount = 11
返回 3 (11 = 5 + 5 + 1)
给出 coins = [2], amount = 3
返回 -1

解析：完全背包问题(UKP, unbounded knapsack problem)，每种物品都有无限多个可用，且此问题背包必须装满
Answer1：最简单的暴力解法，转为0-1背包，第i种物品转换为W/w[i]个0-1背包问题
超时
int coinChange(vector<int> &coins, int amount) {
    // write your code here
    int m = coins.size();
    vector<vector<int>> dp(m, vector<int>(amount + 1, INT_MAX));
    for (int i = 0; i < m; ++i) {
        dp[i][0] = 0;
    }
    for ( int j = 1; j <= amount; ++j) {
        if (j % coins[0] == 0) {
            dp[0][j] = j / coins[0];
        }
        else{
            dp[0][j] = -1;
        }
    }
    for (int i = 1; i < m; ++i) {
        for (int j= 1; j <=amount; ++j) {
            for (int k = 0; k * coins[i] <=j; ++k) {
                if (dp[i - 1][j - k * coins[i]] >= 0) {
                    dp[i][j] = min(dp[i][j], k + dp[i - 1][j - k * coins[i]]);
                }
            }
            if(dp[i][j] == INT_MAX) {
                dp[i][j] = -1;
            }
        }
    }
    return dp[m - 1][amount];
}

Answer2:
    int coinChange(vector<int> &coins, int amount) {
        // write your code here
        int m = coins.size();
        vector<int> dp(amount + 1,  INT_MAX - 1);
        dp[0] = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = coins[i]; j <= amount; ++j) {
                dp[j] = min(dp[j], dp[j - coins[i]] + 1);
            }
        }
        return dp[amount] <= amount? dp[amount] : -1;
    }
