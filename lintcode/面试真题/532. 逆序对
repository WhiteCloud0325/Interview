描述
在数组中的两个数字如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。给你一个数组，求出这个数组中逆序对的总数。
概括：如果a[i] > a[j] 且 i < j， a[i] 和 a[j] 构成一个逆序对。
样例
序列 [2, 4, 1, 3, 5] 中，有 3 个逆序对 (2, 1), (4, 1), (4, 3)，则返回 3 。
Answer:本质是进行归并排序， 在merge的过程中进行计算逆序对
long long res = 0;
long long reversePairs(vector<int> &A) {
    // write your code here
    merge_sort(A);
    return res;

}
vector<int> merge(vector<int> &lhs, vector<int> &rhs) {
    auto it1 = lhs.begin(), it2 = rhs.begin();
    vector<int> merge_res;
    while (it1 != lhs.end() && it2 != rhs.end()) {
        if (*it1 <= *it2) {
            merge_res.push_back(*it1);
            ++it1;
        }
        else {
            merge_res.push_back(*it2);
            res += lhs.end() - it1;
            ++it2;
        }
    }
    if (it1 != lhs.end())
        merge_res.insert(merge_res.end(), it1, lhs.end());
    if (it2 != rhs.end())
        merge_res.insert(merge_res.end(), it2, rhs.end());
    return merge_res;
}

void merge_sort(vector<int> &data) {
    if (data.size() <= 1) {
        return;
    }
    int mid = data.size() / 2;
    vector<int> left(data.begin(), data.begin() + mid);
    vector<int> right(data.begin() + mid, data.end());
    merge_sort(left);
    merge_sort(right);
    data = merge(left, right);
}
