描述
判断两个可能包含通配符“？”和“*”的字符串是否匹配。匹配规则如下：

'?' 可以匹配任何单个字符。
'*' 可以匹配任意字符串（包括空字符串）。
两个串完全匹配才算匹配成功。


函数接口如下:

bool isMatch(const char *s, const char *p)
样例
一些例子：

isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "*") → true
isMatch("aa", "a*") → true
isMatch("ab", "?*") → true
isMatch("aab", "c*a*b") → false


Answer:动态规划
bool isMatch(string &s, string &p) {
    // write your code here
    if (s.empty() && p.empty()) {
        return true;
    }
    if (p.empty()) {
        return false;
    }
    int m = s.size(), n = p.size();
    vector<vector<bool>> dp(m + 1, vector<bool> (n + 1, false));
    dp[0][0] = true;
    if (p[0] == '*') {
        dp[0][1] = true; //考虑 s="" 和p="*"
    }
    for (int i = 1; i <= m; ++i) {
        for (int j = 1; j <= n; ++j) {
            if(s[i - 1] == p[j - 1] || p[j - 1] == '?') {
                dp[i][j] = dp[i - 1][j - 1];
            }
            else if (p[j - 1] == '*') {
                dp[i][j] = dp[i][j - 1] || dp[i - 1][j - 1] || dp[i - 1][j];
            }
            else {
                dp[i][j] = false;
            }
        }
    }
    return dp[m][n];
}
