描述
给出一个整数数组，堆化操作就是把它变成一个最小堆数组。

对于堆数组A，A[0]是堆的根，并对于每个A[i]，A [i * 2 + 1]是A[i]的左儿子并且A[i * 2 + 2]是A[i]的右儿子。

说明
什么是堆？

堆是一种数据结构，它通常有三种方法：push， pop 和 top。其中，“push”添加新的元素进入堆，“pop”删除堆中最小/最大元素，“top”返回堆中最小/最大元素。
什么是堆化？

把一个无序整数数组变成一个堆数组。如果是最小堆，每个元素A[i]，我们将得到A[i * 2 + 1] >= A[i]和A[i * 2 + 2] >= A[i]
如果有很多种堆化的结果？

返回其中任何一个。
样例
给出 [3,2,1,4,5]，返回[1,2,3,4,5] 或者任何一个合法的堆数组
挑战
O(n)的时间复杂度完成堆化

Answer:
   void heapify(vector<int> &A) {
        // write your code here
        int n = A.size();
        if(n <= 1){
            return;
        }
        int i = (n - 2) / 2;
        for(; i >= 0; --i){
            helper(A, i);
        }
        return;
    }
    void helper(vector<int> &A, int p){
        int n = A.size();
        if( p >= n - 1){
            return;
        }
        int left = 2 * p + 1;
        int right = 2 * p + 2;
        int tmp = p;
        if (left < n && A[left] < A[tmp]){
            tmp = left;
        }
        if (right < n && A[right] < A[tmp]) {
            tmp = right;
        }
        if (tmp != p) {
            swap(A[tmp], A[p]);
            helper(A, tmp);
        }
        return;
    }
