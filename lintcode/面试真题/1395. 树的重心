描述
对于一棵多叉树，如果有一个结点 R，以R为根，其所有子树的最大子树的结点数最少，则称结点 R 为这棵树的重心。
现在给你一棵有 n 个结点的多叉树，求这棵树的重心，如果有多个重心，则返回编号最小的。
x[i], y[i]代表第 i 条边的两个点。
2 <= n <= 10^5
1 <= x[i], y[i] <= n
样例
给出 x = [1], y = [2], 返回 1。

解释：
1 和 2 都可以为重心，但是 1 的编号最小。
给出 x = [1,2,2], y = [2,3,4], 返回 2。

解释：
2 为重心。

Answer:递归，但为了防止超时，对于子树数目小于整个节点数目一半的就不需要计算了。
class Solution {
public:
    /**
     * @param x: The vertexes of the edges
     * @param y: The vertexes of the edges
     * @return: Return the index of barycentre
     */
    map<int, vector<int>> table;
    int getBarycentre(vector<int> &x, vector<int> &y) {
        // Write your code here
        int n = x.size();
        for (int i = 0; i < n; ++i) {
            table[x[i]].push_back(y[i]);
            table[y[i]].push_back(x[i]);
        }
        int m = table.size();
        vector<bool> flag(m + 1, false);
        int res = 1, count = INT_MAX;
        for (auto it = table.begin(); it != table.end(); ++it) {
            if (it->second.size() < table.size() / 2) { //防止超时，减少不必要的计算
                continue;
            }
            int temp = dfs(it->first, flag);
            if (temp < count) {
                res = it->first;
                count = temp;
            }
        }
        return res;
        
    }
    int dfs(int node, vector<bool>& flag) {
        flag[node] = true;
        int num = 1;
        for (auto i : table[node]) {
            if (flag[i]) {
                continue;
            }
            flag[i] = true;
            num += dfs(i, flag);
            flag[i] = false;
        }
        flag[node] = false;
        return num;
    }
};
