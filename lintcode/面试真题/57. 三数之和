描述
给出一个有n个整数的数组S，在S中找到三个整数a, b, c，找到所有使得a + b + c = 0的三元组。
在三元组(a, b, c)，要求a <= b <= c。
结果不能包含重复的三元组。

样例
如S = {-1 0 1 2 -1 -4}, 你需要返回的三元组集合的是：

(-1, 0, 1)

(-1, -1, 2)

Answer1:
class Solution {
public:
    /**
     * @param numbers: Give an array numbers of n integer
     * @return: Find all unique triplets in the array which gives the sum of zero.
     */
    vector<vector<int>> threeSum(vector<int> &numbers) {
        // write your code here
        sort(numbers.begin(),numbers.end());
        vector<vector<int>> res;
        if(numbers.size()<3){
            return res;
        }
        for(int i=0;i<numbers.size()-2;++i){
            if(numbers[i]>0){
                break;
            }
            if(i>0 && numbers[i]==numbers[i-1]){
                continue;
            }
            int m=i+1;
            
            int n=numbers.size()-1;
            while(m<n){
                if( m >i+1 && numbers[m]== numbers[m-1]){
                    ++m;
                    continue;
                }
                if(n<numbers.size()-1 && numbers[n]==numbers[n+1]){
                    --n;
                    continue;
                }
                if(numbers[i]+numbers[m]+numbers[n] == 0){
                    vector<int> temp;
                    temp.push_back(numbers[i]);
                    temp.push_back(numbers[m]);
                    temp.push_back(numbers[n]);
                    res.push_back(temp);
                    ++m;
                    --n;
                }
                else if(numbers[i]+numbers[m]+numbers[n]>0){
                    --n;
                }
                else{
                    ++m;
                }
            }
        }
        return res;
    }
};
