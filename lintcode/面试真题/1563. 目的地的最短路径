  描述
给定表示地图上坐标的2D数组，地图上只有值0,1,2。 0表示可以通过，1表示不可通过，2表示目标位置。从坐标[0,0]开始，你只能上，下，左，右移动。找到可以到达目的地的最短路径，并返回路径的长度。
1.地图一定存在且不为空，并且只存在一个目的地
样例
给定:

[
 [0, 0, 0],
 [0, 0, 1],
 [0, 0, 2]
]
返回: 4
  Answer：
   int shortestPath(vector<vector<int>> &targetMap) {
    	// Write your code here
    	int m = targetMap.size(), n = targetMap[0].size();
    	vector<vector<bool>> flag(m, vector<bool>(n, false));
    	queue<pair<int, int>> q;
    	queue<int> col;
    	int res = 0;
    	q.push(make_pair(0, 0));
    	flag[0][0] = true;
    	while (!q.empty()) {
    		int n = q.size();
    		for (int k = 0; k < n; ++k) {
    			int i = q.front().first;
    			int j = q.front().second;
    			q.pop();
    			if (targetMap[i][j] == 2) {
    				return res;
    			}
    			if (i - 1 >= 0 && targetMap[i - 1][j] != 1 && !flag[i - 1][j]) {
    				q.push(make_pair(i - 1, j));
    				flag[i - 1][j] = true;
    			}
    			if (i + 1 < m && targetMap[i + 1][j] != 1 && !flag[i + 1][j]) {
    				q.push(make_pair(i + 1, j));
    				flag[i + 1][j] = true;
    			}
    			if (j - 1 >= 0 && targetMap[i][j - 1] != 1 && !flag[i][j - 1]) {
    				q.push(make_pair(i, j - 1));
    				flag[i][j - 1] = true;
    			}
    			if (j + 1 >= 0 && targetMap[i][j + 1] != 1 && !flag[i][j + 1]) {
    				q.push(make_pair(i, j + 1));
    				flag[i][j + 1] = true;
    			}
    		}
    		++res;
    	}
    	return res;
    }
