描述
设计实现一个带有下列属性的二叉查找树的迭代器：

元素按照递增的顺序被访问（比如中序遍历）
next()和hasNext()的询问操作要求均摊时间复杂度是O(1)

样例
对于下列二叉查找树，使用迭代器进行中序遍历的结果为 [1, 6, 10, 11, 12]

   10
 /    \
1      11
 \       \
  6       12
挑战
额外空间复杂度是O(h)，其中h是这棵树的高度

Super Star：使用O(1)的额外空间复杂度

Answer:
/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */


class Solution {
public:
    /*
     * @param root: The root of the binary search tree.
     * @param value: Remove the node with given value.
     * @return: The root of the binary search tree after removal.
     */
    TreeNode * removeNode(TreeNode * root, int value) {
        // write your code here
        TreeNode **pre = &root;
        TreeNode **node = &root;
        TreeNode *cur = root;
        while(cur && cur->val !=value){
            if(cur->val < value){
                node = &(cur->right);
                cur = cur->right;
            }
            else{
                node = &(cur->left);
                cur = cur->left;
            }
        }
        if(cur){
            TreeNode* temp = cur;
            if(cur->left && cur->right){
                *node = cur->right;
                cur = cur->right;
                while(cur->left){
                    cur = cur->left;
                }
                cur->left = temp->left;
            }
            else if(cur->left && !cur->right){
                *node =cur->left;
            }
            else if(!cur->left && cur->right){
                *node = cur->right;
            }
            else{
                *node = NULL;
            }
            delete temp;
        }
        return *pre;
    }
};
