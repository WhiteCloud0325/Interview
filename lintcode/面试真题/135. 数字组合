描述
给出一个候选数字的set(C)和目标数字(T),找到C中所有的组合，使找出的数字和为T。C中的数字可以无限制重复被选取。

例如,给出候选数组[2,3,6,7]和目标数字7，所求的解为：

[7]，

[2,2,3]

所有的数字(包括目标数字)均为正整数。
元素组合(a1, a2, … , ak)必须是非降序(ie, a1 ≤ a2 ≤ … ≤ ak)。
解集不能包含重复的组合
样例
给出候选set[2,3,6,7]和目标数字7

返回 [[7],[2,2,3]]

Answer:回溯法
注意bad case，有数字重复，先将数组排序并去除重复数字
vector<int> cur;
vector<vector<int>> res;
vector<vector<int>> combinationSum(vector<int> &candidates, int target) {
    // write your code here
    //先排序和去除重复数字
    sort(candidates.begin(), candidates.end());
    for(auto it = candidates.begin() + 1; it != candidates.end();) {
        if (*it == *(it - 1)) {
           it = candidates.erase(it);
        }
        else {
            ++it;
        }
    }
    int sum = 0;
    backtrack(target, sum, 0, candidates);
    return res;
}
void backtrack(int &target, int &sum, int pos, vector<int> &candidates) {
    if (sum >= target) {
        if (sum == target) {
            res.push_back(cur);
        }
        return;
    }
    for (int i = pos; i < candidates.size(); ++i) {
        cur.push_back(candidates[i]);
        sum += candidates[i];
        backtrack(target, sum, i, candidates);
        sum -= candidates[i];
        cur.pop_back();
    }

}
