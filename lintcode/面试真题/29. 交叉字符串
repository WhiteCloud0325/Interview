描述
给出三个字符串:s1、s2、s3，判断s3是否由s1和s2交叉构成.

样例
比如 s1 = "aabcc" s2 = "dbbca"

    - 当 s3 = "aadbbcbcac"，返回  true.

    - 当 s3 = "aadbbbaccc"， 返回 false.


Answer:动态规划，这样的字符串比较常用算法是动态规划
        状态方程 i代表s1的前i个字符，j代表s2的前j个字符,i+j是s3的前（i+j）个字符
                m=s1的长度，n代表s2的长度，dp[i][j]代表s1前i个字符和s2前j个字符符合交叉构成
                
                 (s1[i-1]==s3[i+j-1] && dp[i-1][j]) || (s2[j-1]==s3[i+j-1] && dp[i][j-1]): dp[i][j]=true
                                                                                          否则dp[i][j]=false
           bool isInterleave(string &s1, string &s2, string &s3) {
        // write your code here
        int m=s1.size(),n=s2.size(),k=s3.size();
        if((m+n) != k){
            return false;
        }
        vector<vector<bool>> dp(m+1,vector<bool>(n+1,false));
        dp[0][0]=true;
        for(int i=1;i<=m;++i){
            if(s1[i-1]!=s3[i-1]){
                break;
            }
            dp[i][0]=true;
        }
        for(int j=1;j<=n;++j){
            if(s2[j-1]!=s3[j-1]){
                break;
            }
            dp[0][j]=true;
        }
        for(int i=1;i<=m;++i){
            for(int j=1;j<=n;++j){
                if((s1[i-1]==s3[i+j-1] && dp[i-1][j])|| (s2[j-1]==s3[i+j-1] && dp[i][j-1])){
                    dp[i][j]=true;
                }
            }
        }
        return dp[m][n];
    }
