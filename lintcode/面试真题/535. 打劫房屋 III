描述
在上次打劫完一条街道之后和一圈房屋之后，窃贼又发现了一个新的可以打劫的地方，但这次所有的房子组成的区域比较奇怪，聪明的窃贼考察地形之后，发现这次的地形是一颗二叉树。与前两次偷窃相似的是每个房子都存放着特定金额的钱。你面临的唯一约束条件是：相邻的房子装着相互联系的防盗系统，且当相邻的两个房子同一天被打劫时，该系统会自动报警。

算一算，如果今晚去打劫，你最多可以得到多少钱，当然在不触动报警装置的情况下。
样例
  3
 / \
2   3
 \   \ 
  3   1
窃贼最多能偷窃的金钱数是 3 + 3 + 1 = 7.

    3
   / \
  4   5
 / \   \ 
1   3   1
窃贼最多能偷窃的金钱数是 4 + 5 = 9.
Answer:

class Solution {
public:
    /**
     * @param root: The root of binary tree.
     * @return: The maximum amount of money you can rob tonight
     */
    int houseRobber3(TreeNode * root) {
        // write your code here
        int cur_true_sum = 0, cur_false_sum = 0;
        dfs(root, cur_true_sum, cur_false_sum);
        return max(cur_true_sum, cur_false_sum);
    }
    void dfs(TreeNode* root, int &cur_true_sum, int &cur_false_sum){
        if(root == NULL){
            cur_false_sum = cur_true_sum = 0;
            return;
        }
        int cur_true_sum_left = 0, cur_false_sum_left = 0, cur_true_sum_right = 0, cur_false_sum_right = 0;
        dfs(root->left, cur_true_sum_left, cur_false_sum_left);
        dfs(root->right, cur_true_sum_right, cur_false_sum_right);
        cur_true_sum = cur_false_sum_left + cur_false_sum_right + root->val;
        int temp1 = max(cur_true_sum_left + cur_true_sum_right, cur_false_sum_left + cur_false_sum_right);
        int temp2 = max(cur_true_sum_left + cur_false_sum_right, cur_false_sum_left + cur_true_sum_right);
        cur_false_sum = max(temp1, temp2);
        
        return;
    }
};
