描述
数字是不断进入数组的，在每次添加一个新的数进入数组的同时返回当前新数组的中位数。

说明
中位数的定义：

中位数是排序后数组的中间值，如果有数组中有n个数，则中位数为A[(n-1)/2]。
比如：数组A=[1,2,3]的中位数是2，数组A=[1,19]的中位数是1。
样例
持续进入数组的数的列表为：[1, 2, 3, 4, 5]，则返回[1, 1, 2, 2, 3]

持续进入数组的数的列表为：[4, 5, 1, 3, 2, 6, 0]，则返回 [4, 4, 4, 3, 3, 3, 3]

持续进入数组的数的列表为：[2, 20, 100]，则返回[2, 2, 20]
挑战
时间复杂度为O(nlogn)

Answer1:插入排序， 效率很低
vector<int> medianII(vector<int> &nums) {
    // write your code here
    vector<int> res;

    for(int i = 0; i < nums.size(); ++i){
        for(int j = i - 1; j >= 0; --j){
            if(nums[j] < nums[j+1]){
                break;
            }
            swap(nums[j], nums[j+1]);
        }
        res.push_back(nums[i / 2]);
    }
    return res;
}
Answer2:使用一个最大堆，一个最小堆实现， 最大堆存前一半小数，最小堆存后一半数
vector<int> medianII(vector<int> &nums) {
    // write your code here
    vector<int> res;
    priority_queue<int, vector<int>, less<int>> max_heap;
    priority_queue<int, vector<int>, greater<int>> min_heap;
    for(int i = 0; i < nums.size(); ++i){
        if(max_heap.empty() || max_heap.top() >= nums[i]){
            max_heap.push(nums[i]);
            if(max_heap.size() >  min_heap.size() + 1){
                min_heap.push(max_heap.top());
                max_heap.pop();
            }
        }
        else{
            min_heap.push(nums[i]);
            if(min_heap.size() >= max_heap.size() + 1){
                max_heap.push(min_heap.top());
                min_heap.pop();
            }
        }
        res.push_back(max_heap.top());
    }
    return res;
}
