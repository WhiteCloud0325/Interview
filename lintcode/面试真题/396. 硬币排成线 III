描述
有 n 个硬币排成一条线，每一枚硬币有不同的价值。两个参赛者轮流从任意一边取一枚硬币，知道没有硬币为止。计算拿到的硬币总价值，价值最高的获胜。

请判定 第一个玩家 是输还是赢？

样例
给定数组 A = [3,2,2], 返回 true.

给定数组 A = [1,2,4], 返回 true.

给定数组 A = [1,20,4], 返回 false.

Answer1(效率低):  状态dp[i][j] 表示values从第i个硬币到第j个硬币第一个人拿的最大价值
                     sum表示从i到j的总价值
                     dp[i][j] = max(sum - dp[i+1][j], sum - dp[i][j-1])

   bool firstWillWin(vector<int> &values) {
        // write your code here
        int n = values.size();
        if(n <=2){
            return true;
        }
        vector<vector<int> > dp(n, vector<int>(n, 0));
        for(int i = 0; i < n; ++i){
            dp[i][i] = values[i];
        }
        
        for(int i = n-2; i >= 0; --i){
            for(int j = i+1; j < n; ++j){
                int sum = 0; 
                for(int k = i; k <=j; ++k){
                    sum += values[k];
                }
        
                dp[i][j] = max(sum-dp[i+1][j], sum - dp[i][j-1]);
            }
        }
        int sum = 0;
        for(int i =0; i < values.size(); ++i){
            sum+= values[i];
        }
        if(2*dp[0][n-1] > sum ){
            return true;
        }
        else{
            return false;
        }
        
    }
};

Answer2:在求和上对Answer1进行了优化
    bool firstWillWin(vector<int> &values) {
        // write your code here
        int n = values.size();
        if(n <=2){
            return true;
        }
        vector<vector<int>> dp(n, vector<int>(n, 0));
        int sum = 0;
        for(int i= n-1; i >=0; --i){
            sum = values[i];
            dp[i][i] = values[i];
            for(int j = i+1; j < n; ++j){
                sum += values[j];
                dp[i][j] = max(sum - dp[i+1][j], sum - dp[i][j-1]);
            }
            
        }
        if(2 * dp[0][n-1] > sum){
            return true;
        }
        else{
            return false;
        }
        
    }
