描述
写出一个高效的算法来搜索m×n矩阵中的值，返回这个值出现的次数。

这个矩阵具有以下特性：

每行中的整数从左到右是排序的。
每一列的整数从上到下是排序的。
在每一行或每一列中没有重复的整数。

样例
考虑下列矩阵：

[

    [1, 3, 5, 7],

    [2, 4, 7, 8],

    [3, 5, 9, 10]

]

给出target = 3，返回 2
挑战
要求O(m+n) 时间复杂度和O(1) 额外空间

Answer:
int searchMatrix(vector<vector<int>> &matrix, int target) {
    // write your code here
    if (matrix.empty()) {
        return 0;
    }
    int m = matrix.size(), n = matrix[0].size();
    int res = 0;
    int start = 0;
    for (int i = 0; i < m; ++i) {
        if (start == -1) {
            break;
        }
        if (start == n) {
            --start;
        }
        if (matrix[i][start] < target) {
            while (start < n &&matrix[i][start] < target) {
                ++start;
            }
            if (start < n && matrix[i][start] == target) {
                ++res;
            }
        }
        else if(matrix[i][start] > target) {
            while (start >=0 && matrix[i][start] > target) {
                --start;
            }
            if (start >= 0 && matrix[i][start] == target) {
                ++res;
            }
        }
        else {
            ++res;
        }
    }
    return res;
}
