给定一个整数数组，找到和为零的子数组。你的代码应该返回满足要求的子数组的起始位置和结束位置
There is at least one subarray that it's sum equals to zero
样例
给出 [-3, 1, 2, -3, 4]，返回[0, 2] 或者 [1, 3].
Answer: hash方法， i从0到n-1遍历， 将从0到i的和作为key，i作为value， 如果t == 0，说明0到i的和为0，
如果能在hash中找到t，则说明nums[0] +... + nums[j] = t, nums[0]+ ... nums[i] = t,
则nums[j+1]+... + nums[i] = 0
vector<int> subarraySum(vector<int> &nums) {
    // write your code here
    vector<int> res;
    if(nums.empty()){
        return res;
    }
    unordered_map<int, int> table;
    int t = 0;
    for(int i = 0; i < nums.size(); ++i){
        t += nums[i];
        if(t == 0){
            res.push_back(0);
            res.push_back(i);
        }
        else if(table.find(t) != table.end()){
            res.push_back(table.find(t)->second + 1);
            res.push_back(i);
        }
        else{
            table[t] = i;
        }
    }
    return res;
}
