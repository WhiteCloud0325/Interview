描述
你给出一个整数数组(size为n)，其具有以下特点：

相邻位置的数字是不同的
A[0] < A[1] 并且 A[n - 2] > A[n - 1]
假定P是峰值的位置则满足A[P] > A[P-1]且A[P] > A[P+1]，返回数组中任意一个峰值的位置。

It's guaranteed the array has at least one peak.
The array may contain multiple peeks, find any of them.
The array has at least 3 numbers in it.
样例
给出数组[1, 2, 1, 3, 4, 5, 7, 6]返回1, 即数值 2 所在位置, 或者6, 即数值 7 所在位置.

挑战
Time complexity O(logN)

Answer1:
int findPeak(vector<int>& A) {
    // write your code here
    if(A.size() <3){
        return -1;
    }
    int i = 1, j = A.size()-2;
    while(i <= j){
        if( A[i] > A[i-1] && A[i] > A[i+1]){
            return i;
        }
        if( A[j] > A[j-1] && A[j] > A[j+1]){
            return j;
        }
        i++;
        j--;
    }
    return -1;
}

Answewr2:二分法
    int findPeak(vector<int> &A) {
        // write your code here
        int left = 0, right = A.size() - 1, mid = 0;
        while (left < right) {
            mid = left + (right - left) / 2;
            
            mid = left + (right - left) / 2;
		    if (mid == 0) {
			    ++mid;
		    }
		    else if (mid == A.size() - 1) {
			    --mid;
		    }
            if (A[mid] > A[mid - 1] && A[mid] > A[mid + 1]) {
                return mid;
            }
            else if (A[mid - 1] <= A[mid] && A[mid] <= A[mid + 1]) {
                left = mid + 1;
            }
            else if (A[mid - 1] >= A[mid] && A[mid] >= A[mid + 1]) {
                right = mid - 1;
            }
            else {
                if (A[left] <= A[mid]) {
				    right = mid - 1;
			    }
			    else if (A[right] <= A[mid]){
				    left = mid + 1;
			    }
			    else{
				    ++left;
			    	--right;
			    }
            }
        }
        return left;
    }
