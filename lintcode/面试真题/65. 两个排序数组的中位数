描述
两个排序的数组A和B分别含有m和n个数，找到两个排序数组的中位数，要求时间复杂度应为O(log (m+n))。
样例
给出数组A = [1,2,3,4,5,6] B = [2,3,4,5]，中位数3.5

给出数组A = [1,2,3] B = [4,5]，中位数 3
挑战
时间复杂度为O(log n)

double findMedianSortedArrays(vector<int> &A, vector<int> &B) {
    // write your code here
    int n=A.size()+B.size();
    if(n%2==0){
        int v1=findKthNum(A,B,n/2);
        int v2=findKthNum(A,B,n/2+1);
        return (v1+v2)/2.0;
    }
    else{
        return findKthNum(A,B,(n+1)/2);
    }
}
int findKthNum(vector<int> &A,vector<int>&B,int k){
    if(A.empty()){
        return B[k-1];
    }
    if(B.empty()){
        return A[k-1];
    }
    int l1=0,l2=0,r1=0,r2=0;
    while(k!=1 && l1!=A.size() && l2!=B.size()){
        r1=min(l1+k/2,(int)A.size())-1;
        r2=min(l2+k/2,(int)B.size())-1;
        if(A[r1]<B[r2]){
            k-=r1-l1+1;
            l1=r1+1;
        }
        else{
            k-=r2-l2+1;
            l2=r2+1;
        }
    }
    if(l1 == A.size()){
        return B[l2+k-1];
    }
    if(l2 == B.size()){
        return A[l1+k-1];
    }
    return min(A[l1],B[l2]);
}
