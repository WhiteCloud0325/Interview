描述
给出一个 n * m 的二维数组，数组每一行的元素都是排序的，每一行选择 1 个数，总共选择 n 个数，这 n 个数的 diff 为 maximum-minimum，求最小的diff

Answer:
样例
Input: [[1,2,3,4,5],[6,7,8,9,10]]
Output: 1

Answer: 使用make_heap构建最大堆最小堆
class Solution {
public:
    /**
     * @param array: a 2D array
     * @return: the minimum difference
     */
    struct Helper{
        Helper(int val_, int pos_):val(val_), pos(pos_){}
        int val;
        int pos;
    };
    struct comp_bigger{
        bool operator() (Helper & lhs, Helper& rhs) {
            if (lhs.val > rhs.val) {
                return true;
            } 
            else {
                return false;
            }
        }  
    };
    int minimumDifference(vector<vector<int>> &array) {
        // Write your code here
        int n = array.size(), m = array[0].size();
        vector<int> dp(n, 0);
        int res = INT_MAX;
        vector<Helper> min_heap;
        int max_num = INT_MIN;
        for (int i = 0; i < n; ++i) {
            min_heap.emplace_back(array[i][0], i);
            max_num = max(max_num, array[i][0]);
        }
        make_heap(min_heap.begin(), min_heap.end(), comp_bigger());
        int cur = 0;
        int value = 0;
        while(1){
            pop_heap(min_heap.begin(), min_heap.end(), comp_bigger());
            cur = min_heap[n - 1].pos;
            value = min_heap[n - 1].val;
            res = min(res, max_num - value);
            if (res ==  0) {
                return 0;
            }
            min_heap.pop_back();
            dp[cur]++;
            if (dp[cur] >= m) {
                break;
            }
            min_heap.emplace_back(array[cur][dp[cur]],cur);
            push_heap(min_heap.begin(), min_heap.end(), comp_bigger());
            max_num = max(max_num, array[cur][dp[cur]]);
        }
        return res;
    }
};
