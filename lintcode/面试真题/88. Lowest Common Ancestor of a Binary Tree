描述
给定一棵二叉树，找到两个节点的最近公共父节点(LCA)。

最近公共祖先是两个节点的公共的祖先节点且具有最大深度。
样例
对于下面这棵二叉树

  4
 / \
3   7
   / \
  5   6
LCA(3, 5) = 4

LCA(5, 6) = 7

LCA(6, 7) = 7

Answer1:采用深度优先搜索，使用foundA和foundB来表示是否找到A和B，但要注意的是，函数使用引用，对每个结点要先声名临时的
bool leftA=false,leftB=false,rightA=false,rightB=false;否则只用foundA，foundB导致直接返回右子树结果
class Solution {
public:
    /*
     * @param root: The root of the binary search tree.
     * @param A: A TreeNode in a Binary.
     * @param B: A TreeNode in a Binary.
     * @return: Return the least common ancestor(LCA) of the two nodes.
     */
    TreeNode * lowestCommonAncestor(TreeNode * root, TreeNode * A, TreeNode * B) {
        // write your code here
        bool foundA = false, foundB = false;
        return depthSearch(root, foundA, foundB, A, B);
    }
    TreeNode* depthSearch(TreeNode* root, bool &foundA, bool &foundB, TreeNode* &A, TreeNode* &B){
        if(!root){
            return NULL;
        }
        bool leftA=false,leftB=false,rightA=false,rightB=false;
        TreeNode* temp = depthSearch(root->left, leftA, leftB, A, B);
        if(leftA && leftB){
            foundA=leftA;
            foundB=leftB;
            return temp;
        }
        temp = depthSearch(root->right, rightA, rightB, A, B);
        if(rightA && rightB){
            foundA=rightA;
            foundB=rightB;
            return temp;
        }
        if(root == A || leftA || rightA){
            foundA = true;
        }
        if(root == B || rightB || leftB){
            foundB = true;
        }
        if(foundA && foundB){
            return root;
        }
        return NULL;
    }
};
