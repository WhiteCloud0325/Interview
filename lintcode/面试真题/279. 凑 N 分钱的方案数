描述
给你无限多个的 25 分，10 分，5 分和 1 分的硬币。问如果要凑出 n 分钱有多少种不同的方式？

样例
给出 n = 11

11 = 1 + 1 + 1... + 1
   = 1 + 1 + 1 + 1 + 1 + 1 + 5
   = 1 + 5 + 5
   = 1 + 10
返回 4。

Answer1:回溯，时间负责度比较高，结果超时
vector<int> coins = {1, 5, 10, 25};
int waysNCents(int n) {
    // write your code here
    int res = 0, sum = 0;
    backTrace(res, 0, sum, n);
    return res;
}
void backTrace(int &res, int pos, int &sum, int &target) {
    if(sum == target) {
        ++res;
    }
    else if (sum > target) {
        return;
    }
    else {
        for (int i = pos; i < coins.size(); ++i) {
            sum += coins[i];
            backTrace(res, i, sum, target);
            sum -= coins[i];
        }
    }
}

Answer2：动态规划 dp[i][n]表示用前i种硬币表示n的所有组合数
递归公式 dp[i][n] = dp[i-1][sum] + dp[i - 1][sum - Vm]  +...+dp[i-1][sum - k * Vm]
k从0到 sum/Vm
int waysNCents(int n) {
    // write your code here
    int coins[4] = {1, 5, 10, 25};
    vector<vector<int>> dp(4, vector<int>(n + 1, 0));
    for (int i = 0; i <= n; ++i) {
        dp[0][i] = 1;
    }
    for (int j = 0; j < 4; ++j) {
        dp[j][0] = 1;
    }
    for (int i = 1; i <= 3; ++i) {
        for (int j = 1; j <= n; ++j) {
            for (int k = 0; k <= j / coins[i]; ++k) {
                dp[i][j] += dp[i - 1][j - coins[i] * k];
            }
        }
    }


    return dp[3][n];
}
Answer3:
int waysNCents(int n) {
    // write your code here
    vector<int> dp(n + 1, 0) ;
    dp[0] = 1;
    int coins[4] = {1, 5, 10, 25};
    for (int i = 0; i <= 3; ++i) {
        for (int j = coins[i]; j <=n; ++j) {
            dp[j] += dp[j - coins[i]];
        }
    }
    return dp[n];
}
