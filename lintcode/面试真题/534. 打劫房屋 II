描述
在上次打劫完一条街道之后，窃贼又发现了一个新的可以打劫的地方，但这次所有的房子围成了一个圈，这就意味着第一间房子和最后一间房子是挨着的。每个房子都存放着特定金额的钱。你面临的唯一约束条件是：相邻的房子装着相互联系的防盗系统，且 当相邻的两个房子同一天被打劫时，该系统会自动报警。

给定一个非负整数列表，表示每个房子中存放的钱， 算一算，如果今晚去打劫，你最多可以得到多少钱 在不触动报警装置的情况下。

样例
给出nums = [3,6,4], 返回　6，　你不能打劫3和4所在的房间，因为它们围成一个圈，是相邻的
Answer:可看成是打劫房屋 I的延伸， nums.size() = n,可看成是从0到n-2，和从1到n-1问题1中的最大值
int houseRobber2(vector<int> &A) {
      // write your code here
      if(A.empty()){
          return 0;
      }
      if(A.size() == 1){
          return A[0];
      }
      int n = A.size();
      int dp[2] = {0};
      bool flag[2] = {false};
      int c = 0;
      for(int i =1; i < n; ++i){
          c = c ^ 1;
          if(flag[c ^ 1]){
              if(dp[c] + A[i-1] > dp[c^1]){
                  dp[c] = dp[c] + A[i-1];
                  flag[c] = true;
              }
              else{
                  dp[c] = dp[c^1];
                  flag[c] = false;
              }
          }
          else{
              flag[c] = true;
              dp[c] = dp[c^1] + A[i-1];
          }
      }
      int dp1 = dp[c];
      dp[0] = dp[1] = 0;
      flag[0] = flag[0] = false;
      for(int i =2; i <=n; ++i){
          c = c ^ 1;
          if(flag[c ^ 1]){
              if(dp[c] + A[i-1] > dp[c^1]){
                  dp[c] = dp[c] + A[i-1];
                  flag[c] = true;
              }
              else{
                  dp[c] = dp[c^1];
                  flag[c] = false;
              }
          }
          else{
              flag[c] = true;
              dp[c] = dp[c^1] + A[i-1];
          }
      }
      int dp2 = dp[c];
      return max(dp1, dp2);
  }
