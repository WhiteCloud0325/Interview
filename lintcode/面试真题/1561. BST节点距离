描述
给定一个integer数组（无序）和2个node值，按给出的数组构建 BST，找出这两个node在 BST 中的距离。
If two nodes do not appear in the BST, return -1
We guarantee that there are no duplicate nodes in BST
样例
input:
numbers = [2,1,3]
node1 = 1
node2 = 3
output:
2

Answer:两个考点，1.构造二叉搜索树；2.二分查找节点
class Solution {
public:
    /**
     * @param numbers: the given list
     * @param node1: the given node1
     * @param node2: the given node2
     * @return: the distance between two nodes
     */
    class TreeNode {
    public:
	    int val;
	    TreeNode *left, *right;
	    TreeNode(int val) {
		    this->val = val;
		    this->left = this->right = NULL;
	    }
    };
    TreeNode* buildBST(vector<int> &numbers) {
        TreeNode *root = NULL;
        for (auto i : numbers) {
            if (root== NULL) {
                root = new TreeNode(i);
            }
            else {
                TreeNode* cur = root;
                TreeNode* last = NULL;
                while (cur) {
                    last = cur;
                    if (i < cur->val) {
                        cur = cur->left;
                    }
                    else {
                        cur = cur->right;
                    }
                }
                if(i < last->val) {
                    last->left = new TreeNode(i);
                }
                else {
                    last->right = new TreeNode(i);
                }
            }
        }
        return root;
    }
    
    int bstDistance(vector<int> &numbers, int node1, int node2) {
        // Write your code here
        TreeNode* root = buildBST(numbers);
        while(root) {
            if(node1 < root->val && node2 < root->val) {
                root = root->left;
            }
            else if (node1 > root->val && node2 > root->val) {
                root = root->right;
            }
            else {
                break;
            }
        }
        if (root == NULL ) {
            return -1;
        }
        int depth1 = dfs(root, node1);
        int depth2 = dfs(root, node2);
        if (depth1 == -1 || depth2 == -1) {
            return -1;
        }
        else {
            return  depth2 + depth1;
        }
        
    }
    
    int dfs(TreeNode* root, int node) {
        if(root == NULL) {
            return -1;
        }
        if (root->val == node) {
            return 0;
        }
        int depth = (root->val > node)? dfs(root->left, node):dfs(root->right, node);
        if (depth == -1) {
            return -1;
        }
        else {
            return depth + 1;
        }
    }
};
