描述
给一棵二叉树和一个目标值，设计一个算法找到二叉树上的和为该目标值的所有路径。路径可以从任何节点出发和结束，但是需要是一条一直往下走的路线。
也就是说，路径上的节点的层级是逐个递增的。
样例
对于二叉树：

    1
   / \
  2   3
 /   /
4   2
给定目标值6。那么满足条件的路径有两条：

[
  [2, 4],
  [1, 3, 2]
]

Answer1: dfs
vector<vector<int>> res;
vector<vector<int>> binaryTreePathSum2(TreeNode * root, int target) {
    // write your code here
    if (root == NULL) {
        return res;
    }
    vector<int> cur;
    vector<int> sum;
    dfs(root, cur, sum, target);
    return res;
}

void dfs(TreeNode *root, vector<int> cur, vector<int> sum, int target) {
    if (root == NULL) {
        return;
    }
    cur.push_back(root->val);
    for (int i = 0; i < sum.size(); ++i) {
        sum[i] += root->val;
        if (sum[i] == target) {
            vector<int> temp(cur.begin() + i, cur.end());
            res.push_back(temp);
        }
    }
    sum.push_back(root->val);
    if (root->val == target) {
        vector<int> temp = {root->val};
        res.push_back(temp);
    }
    dfs(root->left, cur, sum ,target);
    dfs(root->right, cur, sum, target);
}
