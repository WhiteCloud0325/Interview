描述
给出一个二维的字母板和一个单词，寻找字母板网格中是否存在这个单词。

单词可以由按顺序的相邻单元的字母组成，其中相邻单元指的是水平或者垂直方向相邻。每个单元中的字母最多只能使用一次。

样例
给出board =

[

  "ABCE",

  "SFCS",

  "ADEE"

]

word = "ABCCED"， ->返回 true,

word = "SEE"，-> 返回 true,

word = "ABCB"， -> 返回 false.
Answer:回溯算法
bool exist(vector<vector<char>> &board, string &word) {
    // write your code here
    int m = board.size(), n = board[0].size();
    vector<vector<bool>> flag(m, vector<bool>(n, false));
    bool res = false;
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            res = backtrace(board, i, j, word, 0, flag);
            if(res){
                return true;
            }
        }
    }
    return false;        
}
bool backtrace(vector<vector<char>> &board, int row, int col, string &word, int cur, vector<vector<bool>> &flag) {
    if (cur == word.size()) {
        return true;
    }
    int m = board.size(), n = board[0].size();
    if ((row < 0 || row >=m) || (col < 0 || col >= n )){
        return false;
    }
    if (flag[row][col] || board[row][col] != word[cur]) {
        return false;
    }
    flag[row][col] = true;
    bool res = false;
    res = backtrace(board, row - 1, col, word, cur + 1, flag);
    if(res){
        return res;
    }
    res = backtrace(board, row + 1, col, word, cur + 1, flag);
    if (res) {
        return res;
    }
    res = backtrace(board, row, col - 1, word, cur + 1, flag);
    if (res) {
        return res;
    }
    res = backtrace(board, row, col + 1, word, cur + 1, flag);
    if (res) {
        return res;
    }
    flag[row][col] = false;
    return res;
}
