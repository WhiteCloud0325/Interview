描述
假设有一个数组，它的第i个元素是一个给定的股票在第i天的价格。设计一个算法来找到最大的利润。你可以完成尽可能多的交易(多次买卖股票)。
然而,你不能同时参与多个交易(你必须在再次购买前出售股票)。
样例
给出一个数组样例[2,1,2,0,1], 返回 2
Answer:贪婪算法，只要当前价格小于前一个价格就选择以前一个价格买股票
int maxProfit(vector<int> &prices) {
    // write your code here
    int n = prices.size();
    if(n <= 1) {
        return 0;
    }
    int res = 0;
    int buy = prices[0], sell = prices[0];
    for (int i = 1; i < n; ++i) {
        if(prices[i] < sell){
            res += sell - buy;
            buy = sell = prices[i];
        }
        else{
            sell = prices[i];
        }
    }
    res += sell - buy;
    return res;
}

Answer2:
int maxProfit(vector<int> &prices) {
    // write your code here
    int res = 0, p = INT_MAX;
    for (auto i : prices) {
        if (i > p) {
            res += i - p;
        }
        p = i;
    }
    return res;
}
