描述
给出字符串S和字符串T，计算S的不同的子序列中T出现的个数。

子序列字符串是原始字符串通过删除一些(或零个)产生的一个新的字符串，并且对剩下的字符的相对位置没有影响。(比如，“ACE”是“ABCDE”的子序列字符串,而“AEC”不是)。 
样例
给出S = "rabbbit", T = "rabbit"

返回 3
挑战
Do it in O(n2) time and O(n) memory.

Answer:动态规划， 二维动态规划，外部以子序列字符串T子状态分析，内部以字符串S划分子问题，
dp[i][j]表示S子串S.substr(0,j)包含T子串T.substr(0,i)子序列数目，
dp[i][j] =  dp[i][j-1] + dp[i-1][j-1] , if S[j-1] == T[i-1]
            dp[i][j-1] ,else
由于dp[i][j]只与dp[i-1]有关，所以可以用取模的方式索引i来减少空间

class Solution {
public:
    /*
     * @param : A string
     * @param : A string
     * @return: Count the number of distinct subsequences
     */
    int numDistinct(string S, string T) {
        // write your code here
        int m = S.size(), n = T.size();
        if(m < n){
            return 0;
        }
        vector<vector<int>> dp(2,vector<int>(m+1, 0));
        dp[0][0]=1;
        for(int i =1; i <=n; ++i){
            dp[i%2].assign(m+1,0);
            for(int j = i; j<=m; ++j){
                if(S[j-1] == T[i-1]){
                    dp[i%2][j] = dp[i%2][j-1] + dp[(i-1)%2][j-1];
                }
                else{
                    dp[i%2][j] = dp[i%2][j-1];
                }
            }
        }
        return dp[n%2][m];
    }
};
O(n2) memory is also acceptable if you do not know how to optimize memory.
