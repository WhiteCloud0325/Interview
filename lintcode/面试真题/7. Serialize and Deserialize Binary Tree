描述
设计一个算法，并编写代码来序列化和反序列化二叉树。将树写入一个文件被称为“序列化”，读取文件后重建同样的二叉树被称为“反序列化”。

如何反序列化或序列化二叉树是没有限制的，你只需要确保可以将二叉树序列化为一个字符串，并且可以将字符串反序列化为原来的树结构。
There is no limit of how you deserialize or serialize a binary tree, LintCode will take your output of serialize as the input of deserialize, it won't check the result of serialize.
样例
给出一个测试数据样例， 二叉树{3,9,20,#,#,15,7}，表示如下的树结构：

  3
 / \
9  20
  /  \
 15   7
我们的数据是进行BFS遍历得到的。当你测试结果wrong answer时，你可以作为输入调试你的代码。

你可以采用其他的方法进行序列化和反序列化。
Answer:BFS序列化，当一个节点的子结点为空时赋为‘#’，NULL的节点的子结点不再赋值
/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */


class Solution {
public:
    /**
     * This method will be invoked first, you should design your own algorithm 
     * to serialize a binary tree which denote by a root node to a string which
     * can be easily deserialized by your own "deserialize" method later.
     */
    string serialize(TreeNode * root) {
        // BFS
        string res = "";
        queue<TreeNode*> fq;
        fq.push(root);
        while(! fq.empty()){
            int n = fq.size();
            for(int i = 0; i < n; ++i){
                TreeNode* node = fq.front();
                fq.pop();
                if(node){
                    res.insert(res.size(), to_string(node->val) + ",");
                    fq.push(node->left);
                    fq.push(node->right);
                }
                else{
                    res.push_back('#');
                    res.push_back(',');
                }
            }
        }
        while(!res.empty() && (res.back() == ',' || res.back() == '#')){
            res.pop_back();
        }
        return res;
        
    }

    /**
     * This method will be invoked second, the argument data is what exactly
     * you serialized at method "serialize", that means the data is not given by
     * system, it's given by your own serialize method. So the format of data is
     * designed by yourself, and deserialize it here as you serialize it in 
     * "serialize" method.
     */
    TreeNode * deserialize(string &data) {
        // write your code here
        if(data.empty()){
            return NULL;
        }
        TreeNode * root;;
        queue<TreeNode**> fq;
        fq.push(&root);        
        int i = 0;
        while(i < data.size()){
            TreeNode** node = fq.front();
            fq.pop();
            if(data[i] == '#'){
                i+=2;
            }
            else{
                int j = i + 1;
                while(j < data.size() && data[j] != ','){
                    ++j;
                }
                string num = data.substr(i, j - i);
                *node = new TreeNode(stoi(num));
                fq.push(&(*node) -> left);
                fq.push(&(*node) -> right);
                i = j + 1;
            }
            
        }
        return root;
    }
};
