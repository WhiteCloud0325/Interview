描述
给定一个包含 n 个整数的数组，和一个大小为 k 的滑动窗口,从左到右在数组中滑动这个窗口，找到数组中每个窗口内的中位数。
(如果数组个数是偶数，则在该窗口排序数字后，返回第 N/2 个数字。)

样例
对于数组 [1,2,7,8,5], 滑动大小 k = 3 的窗口时，返回 [2,7,7]

最初，窗口的数组是这样的：

[ | 1,2,7 | ,8,5] , 返回中位数 2;

接着，窗口继续向前滑动一次。

[1, | 2,7,8 | ,5], 返回中位数 7;

接着，窗口继续向前滑动一次。

[1,2, | 7,8,5 | ], 返回中位数 7;

挑战
时间复杂度为 O(nlog(n))

Answer:建两个堆，一个最大堆，一个最小堆
    vector<int> medianSlidingWindow(vector<int> &nums, int k) {
        // write your code here
        multiset<int> left,right;
        int n = nums.size();
        vector<int> res;
        if(n == 0)
            return res;

        bool flag = true;
        for(int i = 0 ; i < k ; i++)
        {
            //建立两个堆，左堆存放数组的前半部分，右堆存放后半部分
            build(left,right,flag,nums[i]);

        }    
        res.push_back(*left.rbegin());
        for(int i = k ; i < n ;i++)
        {
            //从堆中删除前一个数；
            erasebuild(left,right,flag,nums[i-k]);
            build(left,right,flag,nums[i]);
            res.push_back(*left.rbegin());

        }
        return res;
    }
    void build(multiset<int> &left, multiset<int> &right, bool &flag, int number)
    {
        if(flag)
        {
            if(!right.empty() && *right.begin() < number)
            {
                right.insert(number);
                number = *right.begin();
                right.erase(right.find(number));
            }
            left.insert(number);

        }
        else
        {
            if( !left.empty() && *left.rbegin() > number)
            {
                left.insert(number);
                number = *left.rbegin();
                left.erase(left.find(number));
            }
            right.insert(number);
        }
        flag = !flag;
    }
    void erasebuild(multiset<int> &left, multiset<int> &right, bool &flag, int number)
    {
        if(left.find(number) != left.end())
        {
            left.erase(left.find(number));
            //如果从左堆删除，则置flag为TRUE，反之为false；
            flag = true;
        }
        else
        {
            right.erase(right.find(number));
            flag = false;
        }

    }
