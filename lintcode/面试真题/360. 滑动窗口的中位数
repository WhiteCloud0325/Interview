描述
给定一个包含 n 个整数的数组，和一个大小为 k 的滑动窗口,从左到右在数组中滑动这个窗口，找到数组中每个窗口内的中位数。
(如果数组个数是偶数，则在该窗口排序数字后，返回第 N/2 个数字。)

样例
对于数组 [1,2,7,8,5], 滑动大小 k = 3 的窗口时，返回 [2,7,7]

最初，窗口的数组是这样的：

[ | 1,2,7 | ,8,5] , 返回中位数 2;

接着，窗口继续向前滑动一次。

[1, | 2,7,8 | ,5], 返回中位数 7;

接着，窗口继续向前滑动一次。

[1,2, | 7,8,5 | ], 返回中位数 7;

挑战
时间复杂度为 O(nlog(n))

Answer:
    vector<int> medianSlidingWindow(vector<int> &nums, int k) {
        // write your code here
        if (k == 1 || nums.empty()) {
            return nums;
        }
        vector<int> res;
        int n = nums.size();
        k = min(n, k);
        vector<int> max_heap;
        vector<int> min_heap(nums.begin(), nums.begin() + k);
        make_heap(min_heap.begin(), min_heap.end(), greater<int>());
        while (min_heap.size() > max_heap.size()) {
            pop_heap(min_heap.begin(), min_heap.end(), greater<int>());
            int temp = min_heap.back();
            min_heap.pop_back();
            max_heap.push_back(temp);
            push_heap(max_heap.begin(), max_heap.end());
        }
        res.push_back(max_heap[0]);
        for (int i = k; i < nums.size(); ++i) {
            if (nums[i - k] <= max_heap[0]) {
                for (auto it = max_heap.begin(); it != max_heap.end(); ++it){
                    if (*it == nums[i - k]) {
                        max_heap.erase(it);
                        break;
                    }
                }
            }
            else {
                for (auto it = min_heap.begin(); it != min_heap.end(); ++it) {
                    if (*it == nums[i - k]) {
                        min_heap.erase(it);
                        break;
                    }
                }
            }
            if (max_heap.empty() || max_heap[0] < nums[i]) {
                min_heap.push_back(nums[i]);
                push_heap(min_heap.begin(), min_heap.end(), greater<int>());
                while (min_heap.size() > max_heap.size()) {
                    pop_heap(min_heap.begin(), min_heap.end(), greater<int>());
                    int temp = min_heap.back();
                    min_heap.pop_back();
                    max_heap.push_back(temp);
                    push_heap(max_heap.begin(), max_heap.end());
                }
            }
            else {
                max_heap.push_back(nums[i]);
                push_heap(max_heap.begin(), max_heap.end());
                while (max_heap.size() > min_heap.size() + 1) {
                    pop_heap(max_heap.begin(), max_heap.end());
                    int temp = max_heap.back();
                    max_heap.pop_back();
                    min_heap.push_back(temp);
                    push_heap(min_heap.begin(), min_heap.end(), greater<int>());
                }
            }
            res.push_back(max_heap[0]);
        }
        return res;
    }
