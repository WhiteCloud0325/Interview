描述
给定一个整数数组，找到一个和最接近于零的子数组。返回第一个和最右一个指数。你的代码应该返回满足要求的子数组的起始位置和结束位置
样例
给出[-3, 1, 1, -3, 5]，返回[0, 2]，[1, 3]， [1, 1]， [2, 2] 或者 [0, 4]。

挑战
O(nlogn)的时间复杂度

Answer: 使用前缀和， 先求前缀和，并对前缀和进行排序
class Solution {
public:
    /*
     * @param nums: A list of integers
     * @return: A list of integers includes the index of the first number and the index of the last number
     */
    vector<int> subarraySumClosest(vector<int> &nums) {
        // write your code here
        vector<int> res;
        if (nums.empty()) {
            return res;
        }
        int n = nums.size();
        vector<pair<int, int>> sum(n + 1);
        int prev = 0;
        sum[0] = make_pair(0,0);
        for (int i = 0; i < n; ++i) {
            prev += nums[i];
            sum[i + 1] = make_pair(prev,i + 1);
        }
        sort(sum.begin(), sum.end(), comp());
        res.resize(2);
        int cur = INT_MAX;
        for (int i = 1; i <=n; ++i) {
            int temp = sum[i].first - sum[i - 1].first;
            if (temp < cur) {
                cur = temp;
                res[0] = min(sum[i].second, sum[i - 1].second);
                res[1] = max(sum[i].second, sum[i - 1].second) - 1;
            }
        }
        return res;
         
    }
    struct comp{
        bool operator() (const pair<int, int> &lhs, const pair<int, int> &rhs) {
            if (lhs.first < rhs.first) {
                return true;
            }
            else {
                return false;
            }
        }
    };
};
