描述
给定一个整数数组（下标由 0 到 n-1，其中 n 表示数组的规模），以及一个查询列表。每一个查询列表有两个整数 [start, end] 。
对于每个查询，计算出数组中从下标 start 到 end 之间的数的总和，并返回在结果列表中。
样例
对于数组 [1,2,7,8,5]，查询[(1,2),(0,4),(2,4)], 返回 [9,23,20]
挑战
O(logN) time for each query

Answer:区间树构造和查询
/**
 * Definition of Interval:
 * classs Interval {
 *     int start, end;
 *     Interval(int start, int end) {
 *         this->start = start;
 *         this->end = end;
 *     }
 * }
 */

class Solution {
public:
    /**
     * @param A: An integer list
     * @param queries: An query list
     * @return: The result list
     */
    class SegmentTreeNode{
    public:
        SegmentTreeNode(int start, int end, long long sum):start(start),end(end),sum(sum),left(NULL),right(NULL){}
    
    public:
        int start;
        int end;
        long long sum;
        SegmentTreeNode *left;
        SegmentTreeNode *right;
    };
    
    SegmentTreeNode* build(vector<int> &A, int start, int end) {
        if (end < start) {
            return NULL;
        }
        else if (start == end) {
            return new SegmentTreeNode(start, end, A[start]);
        }
        else {
            int mid = (start + end) / 2;
            SegmentTreeNode* root = new SegmentTreeNode(start, end, 0);
            root->left = build(A, start, mid);
            root->right = build(A, mid + 1, end);
            root->sum = root->left->sum + root->right->sum;
            return root;
        }
    }
    
    long long query(SegmentTreeNode* root, int start, int end) {
        if (root->start == start && root->end == end) {
            return root->sum;
        }
        int mid = (root->start + root->end) / 2;
        if (mid < start) {
            return query(root->right, start, end);
        }
        else if (mid >= end) {
            return query(root->left, start, end);
        }
        else{
            return query(root->left, start, mid) + query(root->right, mid + 1, end);
        }
     }
    
    vector<long long> intervalSum(vector<int> &A, vector<Interval> &queries) {
        // write your code here
        SegmentTreeNode* root = build(A, 0, A.size() - 1);
        vector<long long> res;
        for (int i = 0; i < queries.size(); ++i) {
            res.push_back(query(root, queries[i].start, queries[i].end));
        }
        return res;
    }
};
