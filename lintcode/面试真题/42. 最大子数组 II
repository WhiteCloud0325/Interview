描述
给定一个整数数组，找出两个 不重叠 子数组使得它们的和最大。
每个子数组的数字在数组中的位置应该是连续的。
返回最大的和。
子数组最少包含一个数

样例
给出数组 [1, 3, -1, 2, -1, 2]
这两个子数组分别为 [1, 3] 和 [2, -1, 2] 或者 [1, 3, -1, 2] 和 [2]，它们的最大和都是 7
挑战
要求时间复杂度为 O(n)

Answer:设数组大小为n，根据最大子数组I问题方法求出 索引i从 0 到 n-1，i之前(包括i)最大子数组的和，然后在返向遍历
子数组，j 从 n-1  到 1，从 j到n-1最大子数组和，和从0到j-1最大子数组求和比较。
及思路是  0到i-1和 i到n-1最大子数组和比价
class Solution {
public:
    /*
     * @param nums: A list of integers
     * @return: An integer denotes the sum of max two non-overlapping subarrays
     */
    int maxTwoSubArrays(vector<int> &nums) {
        // write your code here
        if(nums.size() < 2){
            return -1;
        }
        int n = nums.size();
        int cur=nums[0],cur_sum=nums[0];
        vector<int> max_sum(n,0); // 在 index i(报告index) 之前最大子数组和
        max_sum[0] = nums[0];
        for(int i = 1; i < n; ++i){
            if(cur + nums[i] < nums[i]){
                cur = nums[i];
            }
            else{
                cur += nums[i];
            }
            cur_sum = max(cur_sum, cur);
            max_sum[i] = cur_sum;
        }
        int res = nums[n-1] + max_sum[n-2] ;
        cur = nums[n-1];
        cur_sum = nums[n-1];
        for(int j = n-2; j>0;--j){
            if(cur + nums[j] < nums[j]){
                cur = nums[j];
            }
            else{
                cur +=nums[j];
            }
            cur_sum = max(cur_sum,cur);
            res = max(res,cur_sum+max_sum[j-1]);
        }
        return res;
        
    }
};
