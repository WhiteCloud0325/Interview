描述
The string "PAYPALISHIRING" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)

P   A   H   N
A P L S I I G
Y   I   R
And then read line by line: "PAHNAPLSIIGYIR"
Write the code that will take a string and make this conversion given a number of rows:

String convert(String s, int numRows);
convert("PAYPALISHIRING", 3) should return "PAHNAPLSIIGYIR".

说明
二三三
样例
Given s = "PAYPALISHIRING", numRows = 3, return "PAHNAPLSIIGYIR".


Answer:根据字符串的间隔计算， 注意 numRows为1 的特殊情况
string convert(string &s, int numRows) {
    // Write your code here
    int n = s.size();
    if (numRows == 1) {
        return s;
    }
    string res;
    int interval = 2 * numRows - 2;
    for (int i = 0; i < n; i += interval) {
        res.push_back(s[i]);
    }
    for (int i = 1; i < numRows - 1; ++i) {
        for (int j = i; j < n; j += interval) {
            res.push_back(s[j]);
            if ( j + interval - 2 * i < n) {
                res.push_back(s[j + interval - 2 * i]);
            }
        }
    }
    for (int i = numRows - 1; i < n; i += interval) {
        res.push_back(s[i]);
    }
    return res;
}

Answer2： 使用map, key为行号，value为字符串， z字形遍历数组，相应行存到map里
string convert(string &s, int numRows) {
	// Write your code here
	if (numRows < 2) {
		return s;
	}

	map<int, string> dic;
	int current = 0;
	bool downward = true;
	for (int i = 0; i < s.size(); ++i) {
		if (dic.find(current) != dic.end()) {
			dic[current] += s[i];
		}
		else {
			dic[current] = s[i];
		}

		if (current == numRows - 1) {
			downward = false;
		}
		else if (current == 0) {
			downward = true;
		}

		if (downward) {
			current++;
		}
		else {
			current--;
		}
	}

	string result = "";
	for (map<int, string>::iterator itr = dic.begin(); itr != dic.end(); ++itr) {
		result.append(itr->second);
	}

	return result;
}
