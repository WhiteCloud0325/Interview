描述
从一个二进制流(0/1)里面取出每一位组成二进制串。第i轮可以从流中依次拿i位。每次拿出一位，就把之前的位组成的二进制串往最高位移一位，再加入当前的位。当拿了j个位（j<=i)的时候，如果当前二进制串的值是可以被3整除的，就输出。
二进制流的长度小于等于200000200000

例
给出 a = "11011"``,返回 [2,3,5]。

解释：
拿了2位时，二进制串为11，转成10进制后是3，可以被3整除。
拿了3位时，二进制串为110，转成10进制后是6，可以被3整除。
拿了5位时，二进制串为11011，转成10进制后是27，可以被3整除。
给出 a ="0000"`` , 返回 [1,2,3,4]。

解释：
无论拿了几位，都是0，因此全部输出。
Answer:只要每次取模比较就可以了
vector<int> getOutput(string &s) {
    // Write your code here
    vector<int> res;
    int num = 0;
    for (int i = 0; i < s.size(); ++i) {
        num = 2 * num;
        if (s[i] == '1') {
            num += 1;
        }
        num %= 3;
        if (num == 0) {
            res.push_back(i + 1);
        }
    }
    return res;
}
