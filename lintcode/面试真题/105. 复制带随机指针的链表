描述
给出一个链表，每个节点包含一个额外增加的随机指针可以指向链表中的任何节点或空的节点。

返回一个深拷贝的链表。 
挑战
可否使用O(1)的空间

Answer:
RandomListNode *copyRandomList(RandomListNode *head) {
    // write your code here
    RandomListNode* current = head;

    // make a copy of current node, and make the clone node as the next node of current node
    // something like:
    // current --> clone of current --> next of current
    while (current) {
        RandomListNode* next = current->next;
        RandomListNode* clone = new RandomListNode(current->label);
        current->next = clone;
        clone->next = next;
        current = next;
    }

    current = head;
    while (current) {
        if (current->random) {
            current->next->random = current->random->next;   
        }
        current = current->next->next;
    }

    current = head;
    RandomListNode* cloneHead = NULL;
    RandomListNode* cloneTail = NULL;
    while (current) {
        RandomListNode* nextNext = current->next->next;
        if (cloneTail) {
            cloneTail->next = current->next;
        } else {
            cloneHead = current->next;
        }
        cloneTail = current->next;
        cloneTail->next = NULL;

        current->next = nextNext;
        current = nextNext;
    }

    return cloneHead;
}

Answer2: 先复制链表把每个结点复制到它对应的下一个结点
         例如 1->2->3->4->NULL
              1->1->2->2->3->3->4->4->NULL
              然后在根据前一个节点的random进行对应random的下一个节点(注意random是否为空)
              最后将链表分离
RandomListNode *copyRandomList(RandomListNode *head) {
    // write your code here
    RandomListNode *l1 = NULL, *l2 = NULL;
    for (l1 = head; l1 != NULL; l1 = l1->next->next) {
        l2 = new RandomListNode(l1->label);
        l2->next = l1->next;
        l1->next = l2;
    }
    for (l1 = head; l1 != NULL; l1 = l1->next->next) {
        l2 = l1->next;
        if (l1->random) {
            l2->random = l1->random->next;
        }
    }
    RandomListNode* newHead = head->next;
    for (l1 = head; l1 != NULL; l1 = l1->next) {
        l2 = l1->next;
        l1->next = l2->next;
        if (l2->next) {
            l2->next = l2->next->next;
        }
    }
    return newHead;
}
