描述
有两个不同大小的二叉树： T1 有上百万的节点； T2 有好几百的节点。请设计一种算法，判定 T2 是否为 T1的子树。
若 T1 中存在从节点 n 开始的子树与 T2 相同，我们称 T2 是 T1 的子树。也就是说，如果在 T1 节点 n 处将树砍断，砍断的部分将与 T2 完全相同。

样例
下面的例子中 T2 是 T1 的子树：

       1                3
      / \              / 
T1 = 2   3      T2 =  4
        /
       4
下面的例子中 T2 不是 T1 的子树：

       1               3
      / \               \
T1 = 2   3       T2 =    4
        /
       4
Answer:
bool isSubtree(TreeNode * T1, TreeNode * T2) {
        // write your code here
        if(T1 == NULL && T2 != NULL) {
            return false;
        }
        else if(T2 == NULL) {
            return true;
        }
        else{
            if(helper(T1, T2)){
                return true;
            }
            else{
                return isSubtree(T1->left, T2) || isSubtree(T1->right, T2); 
            }
        }
    }
bool helper(TreeNode *T1, TreeNode* T2) {
    if((T1 == NULL && T2 != NULL) || (T1 != NULL && T2 == NULL)) {
        return false;
    }
    else if(T1 == NULL && T2 == NULL) {
        return true;
    }  
    else{
        if(T1->val == T2->val){
            return helper(T1->left, T2->left) && helper(T1->right, T2->right);
        }
        else{
            return false;
        }
    }
}
