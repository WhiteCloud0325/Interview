描述
请写一个程序，找到两个单链表最开始的交叉节点。
如果两个链表没有交叉，返回null。
在返回结果后，两个链表仍须保持原有的结构。
可假定整个链表结构中没有循环。

样例
下列两个链表：

A:          a1 → a2
                   ↘
                     c1 → c2 → c3
                   ↗            
B:     b1 → b2 → b3
在节点 c1 开始交叉。
挑战
需满足 O(n) 时间复杂度，且仅用 O(1) 内存。

Answer:
ListNode * getIntersectionNode(ListNode * headA, ListNode * headB) {
    // write your code here
    int lenA = 0, lenB = 0;
    ListNode* curA = headA, *curB = headB;
    while (curA) {
        ++lenA;
        curA = curA->next;
    }
    while (curB) {
        ++lenB;
        curB = curB->next;
    }
    curA = headA;
    curB = headB;
    if(lenA > lenB) {
        int i = lenA - lenB;
        while (i--){
            curA = curA->next;
        }
    }
    else {
        int i = lenB - lenA;
        while(i--) {
            curB = curB->next;
        }
    }
    while(curA && curB && curA != curB) {
        curA = curA->next;
        curB = curB->next;
    }
    return curA;
}
