描述
根据中序遍历和后序遍历树构造二叉树
你可以假设树中不存在相同数值的节点
样例
给出树的中序遍历： [1,2,3] 和后序遍历： [1,3,2]

返回如下的树：

  2

 /  \

1    3
Answer:
TreeNode * buildTree(vector<int> &inorder, vector<int> &postorder) {
    // write your code here
    if(inorder.empty()){
        return NULL;
    }
    reverse(inorder.begin(), inorder.end());
    reverse(postorder.begin(), postorder.end());
    bool flag = true;   // true is left, false is right
    TreeNode *root = new TreeNode(postorder[0]);
    std::stack<TreeNode*> st ;
    st.push(root);
    int i = 1, j = 0;
    TreeNode* cur = root;
    while(i < postorder.size()){
        while( !st.empty() && st.top()->val == inorder[j]){
            cur = st.top();
            st.pop();
            ++j;
            flag=false;
        }
        TreeNode *node =  new TreeNode(postorder[i]);
        if(flag){
            cur->right =node;
        }
        else{
            cur->left = node;
            flag = true;
        }
        st.push(node);
        cur = node;
        ++i;

    }
    return root;
}
