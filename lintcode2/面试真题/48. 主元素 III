描述
给定一个整型数组，找到主元素，它在数组中的出现次数严格大于数组元素个数的1/k。
数组中只有唯一的主元素
样例
给出数组 [3,1,2,3,2,3,3,4,4,4] ，和 k = 3，返回 3
挑战
要求时间复杂度为O(n)，空间复杂度为O(k)

class Solution {
public:
    /**
     * @param nums: A list of integers
     * @param k: An integer
     * @return: The majority number
     */
    int majorityNumber(vector<int> &nums, int k) {
        // write your code here
        unordered_map<int,int> counter;
        for(int i=0;i<nums.size();i++){
            auto it = counter.find(nums[i]);
            if(it != counter.end()){
                counter[nums[i]]++;
            }
            else{
                if(counter.size() == k-1){
                    auto it2 = counter.begin();
                    while(it2 != counter.end()){
                        it2->second--;
                        if(it2->second == 0){
                            it2 = counter.erase(it2);
                        }
                        else{
                            ++it2;
                        }
                    }
                }
                else{
                    counter[nums[i]]=1;
                }
            }
        }
        for(int i=0;i<nums.size();++i){
            auto it = counter.find(nums[i]);
            if(it !=counter.end()){
                if(it ->second >0){
                    it->second=-1;
                }
                else{
                    it->second--;
                }
                if(-it->second > nums.size()/k){
                    return it->first;
                } 
            }
        }
        return -1;
        
    }
};
