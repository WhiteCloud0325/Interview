描述
给出 n，问由 1...n 为节点组成的不同的二叉查找树有多少种？
样例
给出n = 3，有5种不同形态的二叉查找树：

1           3    3       2      1
 \         /    /       / \      \
  3      2     1       1   3      2
 /      /       \                  \
2     1          2                  3 

Answer:卡特兰数 vector<int>dp(n+1,0), dp[i]表示有i个节点时有dp[i]个二叉查找树，
当为i时，dp[i]为， 1为根节点时，有左子树0个节点 ，二叉树dp[0];右子树i-1个节点，右子树dp[i-1], dp[0]*dp[i-1]
                 2为根节点时，左子树1个节点，二叉树dp[1]个；右子树i-2个节点，右子树dp[i-2],dp[1]*dp[i-2]
                 ...
                 j为根节点时，左子树j-1个节点，二叉树dp[j-1]个；右子树i-j个节点，右子树dp[i-j],dp[j-1]*dp[i-1]
                 ...
                 i为根节点时，左子树有i-1个节点，二叉树dp[i-1]个；右子树0个节点，右子树dp[0],dp[i-1]*dp[0]
dp[i] = dp[0]*dp[i-1] + dp[1]*dp[i-2] + ...+ dp[j]dp[i-1] + ... + dp[i-1][0]           
class Solution {
public:
    /**
     * @param n: An integer
     * @return: An integer
     */
    int numTrees(int n) {
        // write your code here
        //卡特兰数
        vector<int> dp(n+1,0);
        dp[0] = 1;
        for(int i = 1; i <= n; ++i){
            for(int j = 1; j <= i; ++j){
                dp[i] += dp[j-1] * dp[i-j];
            }
        }
        return dp[n];
    }
};
