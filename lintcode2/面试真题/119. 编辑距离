描述
给出两个单词word1和word2，计算出将word1 转换为word2的最少操作次数。

你总共三种操作方法：

插入一个字符
删除一个字符
替换一个字符
样例
给出 work1="mart" 和 work2="karma"

返回 3

Answer:
class Solution {
public:
    /**
     * @param word1: A string
     * @param word2: A string
     * @return: The minimum number of steps.
     */
    int minDistance(string &word1, string &word2) {
        // write your code here
        int m = word1.size(), n = word2.size();
        vector<vector<int>> dp(2, vector<int>(n+1, 0));//因为只与上一状态有关，所以行数为2
        
        for(int j = 1; j <= n; ++j){
            dp[0][j] = j;  //初始化
        }
        dp[1][0] = 1;
        int c = 0;
        for(int i = 1; i <= m; ++i){
            c = c ^ 1;
            dp[c][0] = i;  //word2 ="" 时，dp[i][0]的初始化
            for(int j = 1; j <= n; ++j){
                if(word1[i-1] == word2[j-1]){
                    dp[c][j] = dp[c ^ 1][j-1];
                }
                else{
                    dp[c][j] = min(dp[c][j-1], min(dp[c^1][j], dp[c^1][j-1])) + 1;
                }
            }
        }
        return dp[c][n];
    }
};
